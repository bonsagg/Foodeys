HOST: http://api.foodeys.io

--- Foodeys API Documentation ---

---
Foodeys API is based on REST principles, all you need to use it is your Foodeys account.
The following documentation covers core resources that are used to manipulate with the main entities. First of all, read basic instructions to start using the API.

# Allowed HTTP requests:

| HTTP Method   | Purpose                             |
| ------------- |-------------------------------------|
| GET           | Get a resource or list of resources |
| POST          | To create a resource                |
| PUT           | To update a resource                |
| DELETE        | To delete resource                  |

# Description Of Usual Server Responses

* 200 ```OK``` - the request was successful (some API calls may return 201 instead).
* 201 ```Created``` - the request was successful and a resource was created.
* 204 ```No Content``` - the request was successful but there is no representation to return (i.e. the response is empty).
* 303 ```See Other``` - the request was successful but there is already an existing representation.
* 400 ```Bad Request``` - the request could not be understood or was missing required parameters.
* 401 ```Unauthorized``` - authentication failed or user doesn't have permissions for requested operation.
* 403 ```Forbidden``` - access denied.
* 404 ```Not Found``` - resource was not found.
* 405 ```Method Not Allowed``` - requested method is not supported for resource.

# API Servers
Foodeys API is targeted to run on two servers: Glassfish 4 and JBoss Wildfly. The can be reached via the following API URIs:

* Glassfish 4: http://api.foodeys.io
* JBoss Wildfly: http://api.wildfly.foodeys.io

---

-- Cook Resources --

This resource lists all cooks in the system
GET /cooks/
> Accept: application/json
< 200
< Content-Type: application/json
{ "cooks": [
  { "url": "/cooks/1/", "name":"Wombat" },
  { "url": "/cooks/2/", "name":"Kuba" }
] }
+++++
< 204


This resource adds a new cook (cook does not exist yet)
POST /cooks/
> Accept: application/json
> Content-Type: application/json
{ "name": "Jamie Oliver", "email": "jamie@example.com" }
< 201
< Location: /cooks/{id}/
+++++
< 303
< Location: /cooks/{id}/


This resource gets a cook by its ID
GET /cooks/{id}/
> Accept: application/json
< 200
< Content-Type: application/json
{ "name": "NameOfCook" }

This resource performs a login for a cook. In the beginning of Foodeys it will be enough to know the name and email to login #quickanddirty
POST /cooks/login/
> Accept: application/json
> Content-Type: application/json
{ "name": "Jamie Oliver", "email": "jamie@example.com" }
< 200
< Content-Type: application/json
{ "token": "TokenForCook" }
+++++
< 400
< Content-Type: application/json
{ "message": "You have not provided proper cook credentials" }

-- Food Resources --

This resource lists all foods in the system
GET /foods/
> Accept: application/json
< 200
< Content-Type: application/json
{ "foods": [
  { "url": "/foods/1/", "name":"Avocado" },
  { "url": "/foods/2/", "name":"Tomato" }
] }

This resource gets a food by its ID
GET /foods/{id}/
> Accept: application/json
< 200
< Content-Type: application/json
{ "name": "NameOfFood" }

This resource gets all recipes for a food
GET /foods/{id}/recipes/
> Accept: application/json
< 200
< Content-Type: application/json
{ "recipes": [
    { "name": "NameOfRecipe", "instructions": "InstructionsOfRecipe", "recipe_url": "RecipeURL", "ingredients": [
        { "food": "NameOfFood", "amount": "AmountOfFood", "unit": "UnitOfAmount", "ingredient_url": "IngredientURL" }
    ]}
]}

This resource adds a new food
POST /foods/{?cookToken}
> Accept: application/json
> Content-Type: application/json
{ "name": "Asparagus" }
< 201
< Location: /foods/{id}/
+++++
< 303
< Location: /foods/{id}/
+++++
< 401
< Content-Type: application/json
{ "message": "You have not provided proper cook token" }

This resource autocompletes 
GET /foods/autocomplete/{?q}
> Accept: application/json
< 200
< Content-Type: application/json
{ "options": ["Option1", "Option2"] }


-- Ingredient Resources --

This resource gets an ingredient by its ID
GET /ingredients/{id}/
> Accept: application/json
< 200
< Content-Type: application/json
{ "food": "NameOfFood", "amount": "AmountOfFood", "unit": "UnitOfAmount", "recipe_url": "RecipeURL" }

This resource updates an ingredient
PUT /ingredients/{id}/{?cookToken}
> Accept: application/json
> Content-Type: application/json
{ "amount": "AmountOfFood", "unit": "UnitOfAmount" }
< 200
+++++
< 401
< Content-Type: application/json
{ "message": "You have not provided proper cook token" }

This resource deletes an ingredient
DELETE /ingredients/{id}/{?cookToken}
> Accept: application/json
< 204
+++++
< 401
< Content-Type: application/json
{ "message": "You have not provided proper cook token" }


-- Recipe Resources --

This resource lists all recipes in the system
GET /recipes/
> Accept: application/json
< 200
< Content-Type: application/json
{ "recipes": [
    { "name": "NameOfRecipe", "instructions": "InstructionsOfRecipe", "recipe_url": "RecipeURL", "ingredients": [
        { "food": "NameOfFood", "amount": "AmountOfFood", "unit": "UnitOfAmount", "ingredient_url": "IngredientURL" }
    ]}
]}

This resource adds a new recipe
POST /recipes/{?cookToken}
> Accept: application/json
> Content-Type: application/json
{ "name": "NameOfRecipe" }
< 201
< Location: /recipes/{id}/
+++++
< 303
< Location: /recipes/{id}/
+++++
< 401
< Content-Type: application/json
{ "message": "You have not provided proper cook token" }

This resources lists all recipes for specific food(s) (Response: TBD)
GET /recipes/search/{?food,food}
> Accept: application/json
< 200
< Content-Type: application/json
{ "recipes": [
    { "name": "NameOfRecipe", "instructions": "InstructionsOfRecipe", "recipe_url": "RecipeURL", "ingredients": [
        { "food": "NameOfFood", "amount": "AmountOfFood", "unit": "UnitOfAmount", "ingredient_url": "IngredientURL" }
    ]}
]}

This resource gets a recipe by its ID
GET /recipes/{id}/
> Accept: application/json
< 200
< Content-Type: application/json
{ "name": "NameOfRecipe", "instructions": "InstructionsOfRecipe", "ingredients": [
    { "food": "NameOfFood", "amount": "AmountOfFood", "unit": "UnitOfAmount", "ingredient_url": "IngredientURL" }
]}

This resource updates a recipe
PUT /recipes/{id}/{?cookToken}
> Accept: application/json
{ "name": "NameOfRecipe", "instructions" : "InstructionsOfRecipe"}
< 204
+++++
< 401
< Content-Type: application/json
{ "message": "You have not provided proper cook token" }

This resource deletes a recipe by its ID
DELETE /recipes/{id}/
> Accept: application/json
< 204
+++++
< 401
< Content-Type: application/json
{ "message": "You have not provided proper cook token" }

This resource gets all ingredients of a recipe
GET /recipes/{id}/ingredients/
> Accept: application/json
< 200
< Content-Type: application/json
{ "ingredients": [
    { "food": "NameOfFood", "amount": "AmountOfFood", "unit": "UnitOfAmount", "ingredient_url": "IngredientURL" }
]}

This resource adds a new ingredient to a recipe
POST /recipes/{id}/ingredients/
> Accept: application/json
{ "foodID": "IDOfFood", "amount": "AmountOfFood", "unit": "UnitOfAmount" }
< 201
< Location: /ingredients/{id}/
+++++
< 303
< Location: /ingredients/{id}/